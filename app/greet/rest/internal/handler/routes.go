// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "go-zero-yun/app/greet/rest/internal/handler/admin"
	base "go-zero-yun/app/greet/rest/internal/handler/base"
	jwt "go-zero-yun/app/greet/rest/internal/handler/jwt"
	test "go-zero-yun/app/greet/rest/internal/handler/test"
	user "go-zero-yun/app/greet/rest/internal/handler/user"
	"go-zero-yun/app/greet/rest/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: base.PingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: admin.InfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/refresh_token",
					Handler: jwt.RefreshTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/get",
					Handler: jwt.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Pkg.Jwt.AccessSecret),
		rest.WithPrefix("/web/jwt"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.TestMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/get",
					Handler: test.GetHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: test.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/redis",
					Handler: test.RedisHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/mongo",
					Handler: test.MongoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/kafka",
					Handler: test.KafkaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/elastic_get",
					Handler: test.ElasticGetHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/elastic_add",
					Handler: test.ElasticAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/cos",
					Handler: test.CosHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wx_work/app_chat_create",
					Handler: test.WxWorkAppChatCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wx_work/app_chat_send",
					Handler: test.WxWorkAppChatSendHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/web/test"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: user.InfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: user.ListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/user"),
	)
}
